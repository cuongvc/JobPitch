{
  "author": {
    "name": "TJ Krusinski",
    "email": "tj@futura.io",
    "url": "http://futura.io"
  },
  "contributors": [
    {
      "name": "Steffen Persch",
      "email": "@n3o77"
    }
  ],
  "name": "nodepdf",
  "description": "Down and dirty PDF rendering in Node.js",
  "main": "./index.js",
  "version": "1.1.3",
  "keywords": [
    "phantomjs",
    "pdf",
    "make a pdf"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/TJkrusinski/NodePDF"
  },
  "homepage": "https://github.com/TJkrusinski/NodePDF",
  "dependencies": {
    "shell-quote": "1.4.x"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "scripts": {
    "test": "mocha tests"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "license": "MIT",
  "readme": "# NodePDF\n\nDown and dirty PDF rendering in Node.js\n\n[![Build Status](https://travis-ci.org/TJkrusinski/NodePDF.png?branch=master)](https://travis-ci.org/TJkrusinski/NodePDF)\n\n## Installation\n\n````\nnpm install nodepdf\n````\n\n## Dependencies\n\n1. PhantomJS\n\n## Contsructor API\n\nYou can use NodePDF two ways, one is using a contstructor that returns an instance of `EventEmitter`.\n\n```` javascript\nvar NodePDF = require('nodepdf');\n\n// last argument is optional, sets the width and height for the viewport to render the pdf from. (see additional options)\nvar pdf = new NodePDF('http://www.google.com', 'google.pdf', {\n\t'viewportSize': {\n\t\t'width': 1440,\n\t\t'height': 900\n\t}, \n\t'args': '--debug=true'\n});\n\npdf.on('error', function(msg){\n\tconsole.log(msg);\n});\n\npdf.on('done', function(pathToFile){\n\tconsole.log(pathToFile);\n});\n\n// listen for stdout from phantomjs\npdf.on('stdout', function(stdout){\n\t // handle\n});\n\n// listen for stderr from phantomjs\npdf.on('stderr', function(stderr){\n\t// handle\n});\n\n````\nOr set the content directly instead of using a URL:\n```` javascript\nvar pdf = new NodePDF(null, 'google.pdf', {\n\t'content': '<html><body><img src=\"https://www.google.com/images/srpr/logo11w.png\" alt=\"google\"/></body></html>',\n\t'viewportSize': {\n\t\t'width': 1440,\n\t\t'height': 900\n\t},\n});\n````\n\n\nYou can set the header and footer contents aswell:\n```` javascript\nvar NodePDF = require('nodepdf');\nvar pdf = new NodePDF('http://yahoo.com', 'yahoo.pdf', {\n\t'viewportSize': {\n\t\t'width': 3000,\n\t\t'height': 9000\n\t},\n\t'paperSize': {\n\t\t'pageFormat': 'A4',\n\t\t'margin': {\n\t\t\t'top': '2cm'\n\t\t},\n\t\t'header': {\n\t\t\t'height': '1cm',\n\t\t\t'contents': 'HEADER {currentPage} / {pages}' // If you have 2 pages the result looks like this: HEADER 1 / 2\n\t\t},\n\t\t'footer': {\n\t\t\t'height': '1cm',\n\t\t\t'contents': 'FOOTER {currentPage} / {pages}'\n\t\t}\n\t},\n\t'zoomFactor': 1.1\n});\n````\n\n## Callback API\n\nThe callback API follows node standard callback signatures using the `render()` method.\n\n```` javascript\nvar NodePDF = require('nodepdf');\n\n// options is optional, sets the width and height for the viewport to render the pdf from. (see additional options)\nNodePDF.render('http://www.google.com', 'google.pdf', options, function(err, filePath){\n\t// handle error and fielPath\n});\n\n// use default options\nNodePDF.render('http://www.google.com', 'google.pdf', function(err, filePath){\n\t// handle error and fielPath\n});\n\n````\n\nAs soon the content option is set, the URL is ignored even if you set one.\n\n## Options + Defaults\n```` javascript\n{\n\t'viewportSize': {\n\t\t'width': 2880,\n\t\t'height': 1440\n\t},\n\t'paperSize': {\n\t\t'format': 'A4',\n\t\t'orientation': 'portrait',\n\t\t'margin': {\n\t\t\t'top': '1cm',\n\t\t\t'right': '1cm',\n\t\t\t'bottom': '1cm',\n\t\t\t'left': '1cm'\n\t\t}\n\t},\n\t'zoomFactor': 1,\n\t'args': '',\n\t'captureDelay': 400\n}\n````\n\nYou can set all the properties from here: http://phantomjs.org/api/webpage/\n\n## Cookies\n\n```` javascript\nvar NodePDF = require('nodepdf');\nvar pdf = new Pdf('http://yahoo.com', 'yahoo.pdf', {\n\t'cookies': [\n\t\t{\n\t\t\t'name':     'Valid-Cookie-Name 1',   /* required property */\n\t\t\t'value':    'Valid-Cookie-Value 1',  /* required property */\n\t\t\t'domain':   'localhost',           /* required property */\n\t\t\t'path':     '/foo',\n\t\t\t'httponly': true,\n\t\t\t'secure':   false,\n\t\t\t'expires':  (new Date()).getTime() + (1000 * 60 * 60)   /* <-- expires in 1 hour */\n\t\t},\n\t\t{\n\t\t\t'name':     'Valid-Cookie-Name 2',\n\t\t\t'value':    'Valid-Cookie-Value 2',\n\t\t\t'domain':   'localhost'\n\t\t}\n\t]\n});\n````\n\nPhantomJS Cookie Object description: http://phantomjs.org/api/webpage/property/cookies.html\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 TJ Krusinski &lt;tj@shoflo.tv&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/TJkrusinski/NodePDF/issues"
  },
  "_id": "nodepdf@1.1.3",
  "dist": {
    "shasum": "958406354ed14ea13cee045fab7e2100476df85e"
  },
  "_from": "nodepdf@",
  "_resolved": "https://registry.npmjs.org/nodepdf/-/nodepdf-1.1.3.tgz"
}
