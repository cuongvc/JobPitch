{
  "name": "elmongo-flex",
  "description": "Mongoose + Elasticsearch",
  "version": "1.0.8",
  "author": {
    "name": "Styonsk"
  },
  "keywords": [
    "mongoose",
    "elasticsearch",
    "search",
    "mongo"
  ],
  "dependencies": {
    "mongoose": "3.6.11",
    "request": "2.25.0",
    "async": "0.2.9"
  },
  "devDependencies": {
    "mocha": "1.8.1",
    "mongodb": "1.3.15"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "main": "./lib/elmongo-flex",
  "repository": {
    "type": "git",
    "url": "http://github.com/styonsk/elmongo-flex.git"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha -t 90000 -R spec"
  },
  "readme": "#`elmongo-flex`\r\n\r\n##Adapted from elmongo to be more flexible in dumping varied mongodb documents into elastic search\r\n\r\n\r\n`elmongo-flex` is a [mongoose](http://mongoosejs.com/) plugin that integrates your data with [Elasticsearch](http://www.elasticsearch.org), to give you the full power of highly available, distributed search across your data. The main difference between elmongo-flex and elmongo is that elmongo-flex allows you to flatten part or all of your documents before dumping them into elastic search\r\n\r\nIf you have [homebrew](http://brew.sh/), you can install and run Elasticsearch with this one-liner:\r\n\r\n```\r\nbrew install elasticsearch && elasticsearch\r\n```\r\n\r\nOr you can install Elasticsearch and run it in the background with this one-liner (assuming you have a `~/bin` directory):\r\n```\r\ncurl http://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-0.90.1.zip -o temp-es.zip && unzip temp-es.zip && rm temp-es.zip && mv elasticsearch-0.90.1 ~/bin/elasticsearch && ~/bin/elasticsearch/bin/elasticsearch\r\n```\r\n\r\n#Install\r\n\r\n```\r\nnpm install elmongo-flex\r\n```\r\n\r\n#Usage\r\n```js\r\nvar mongoose = require('mongoose'),\r\n    elmongo = require('elmongo-flex'),\r\n    Schema = mongoose.Schema\r\n\r\nvar CatSchema = new Schema({\r\n    name: String\r\n})\r\n\r\n// add the elmongo-flex plugin to your collection\r\nCatSchema.plugin(elmongo-flex)\r\n\r\nvar Cat = mongoose.model('Cat', CatSchema)\r\n```\r\n\r\nNow setup the search index with your data:\r\n```js\r\nCat.sync(function (err, numSynced) {\r\n  // all cats are now searchable in elasticsearch\r\n  console.log('number of cats synced:', numSynced)\r\n})\r\n```\r\n\r\nAt this point your Cat schema has all the power of Elasticsearch. Here's how you can search on the model:\r\n```js\r\nCat.search({ query: 'simba' }, function (err, results) {\r\n \tconsole.log('search results', results)\r\n})\r\n\r\n// Perform a fuzzy search\r\nCat.search({ query: 'Sphinxx', fuzziness: 0.5 }, function (err, results) {\r\n\t// ...\r\n})\r\n\r\n// Search in specific fields\r\nCat.search({ query: 'Siameez', fuzziness: 0.5, fields: [ 'breed'] }, function (err, results) {\r\n    // ...\r\n})\r\n\r\n// Paginate through the data\r\nCat.search({ query: '*', page: 1, pageSize: 25 }, function (err, results) {\r\n \t// ...\r\n})\r\n\r\n// Use `where` clauses to filter the data\r\nCat.search({ query: 'john', where: { age: 25, breed: 'siamese' } }, function (err, results) {\r\n\t// ...\r\n})\r\n```\r\n\r\nAfter the initial `.sync()`, any **Cat** models you create/edit/delete with mongoose will be up-to-date in Elasticsearch. Also, `elmongo-flex` reindexes with zero downtime. This means that your data will always be available in Elasticsearch even if you're in the middle of reindexing.\r\n\r\n#API\r\n\r\n##`Model.sync(callback)`\r\n\r\nRe-indexes your collection's data in Elasticsearch. After the first `.sync()` call, Elasticsearch will be all setup with your collection's data. You can re-index your data anytime using this function. Re-indexing is done with zero downtime, so you can keep making search queries even while `.sync()` is running, and your existing data will be searchable.\r\n\r\nExample:\r\n```js\r\nCat.sync(function (err, numSynced) {\r\n\t// all existing data in the `cats` collection is searchable now\r\n    console.log('number of docs synced:', numSynced)\r\n})\r\n```\r\n\r\n##`Model.search(searchOptions, callback)`\r\n\r\nPerform a search query on your model. Any values you provide will override the default search options. The default options are:\r\n\r\n```js\r\n{\r\n    query: '*',\r\n    fields: [ '_all' ],\t// searches all fields by default\r\n    fuzziness: 0.0,\t\t// exact match by default\r\n    pageSize: 25,\r\n    page: 1\r\n}\r\n```\r\n\r\n##`Model.aggregateCount(options, callback)`\r\n\r\nPerform a count aggregation on your model. Set options.terms to {\"field\": yourFieldName} to get documents in an index grouped by that field with a count. Any values you provide will override the default search options. The default options are:\r\n\r\n```js\r\n{\r\n    query: '*',\r\n    fields: [ '_all' ], // searches all fields by default\r\n    fuzziness: 0.0,   // exact match by default\r\n    pageSize: 25,\r\n    page: 1\r\n}\r\n```\r\n\r\n##`Model.plugin(elmongo[, options])`\r\n\r\nGives your collection `.search()` and `.sync()` methods, and keeps Elasticsearch up-to-date with your data when you insert/edit/delete documents with mongoose. Takes an optional `options` object to tell `elmongo` the url that Elasticsearch is running at. In `options` you can specify:\r\n\r\n * `protocol` - http or https (defaults to `http`)\r\n * `host` - the host that Elasticsearch is running on (defaults to `localhost`)\r\n * `port` - the port that Elasticsearch is listening on (defaults to `9200`)\r\n * `prefix` - adds a prefix to the model's search index, allowing you to have separate indices for the same collection on an Elasticsearch instance (defaults to no prefix)\r\n * `url` - allows you to specify the protocol, host and port by just passing in a url eg. `https://elasticsearch.mydomain.com:9300`. The provided url must contain at least a host and port.\r\n * 'flatten' - the key of a sub document in your collection that you would like to flatten. Varying sub-document formats in mongoDB can cause errors when dumped into the same index in elastic search\r\n * `grouper` - the key whose value you would like to append to the keys in the flattened subdocuments. This prevents elastic search from throwing an error when you import documents with the same key but different data types (numer/date/string/etc...)\r\n\r\nSuppose you have a test database and a development database both storing models in the `Cats` collection, but you want them to share one Elasticsearch instance. With the `prefix` option, you can separate out the indices used by `elmongo-flex` to store your data for test and development.\r\n\r\nFor tests, you could do something like:\r\n ```js\r\nCat.plugin(elmongo-flex, { host: 'localhost', port: 9200, prefix: 'test' })\r\n ```\r\nAnd for development you could do something like:\r\n```js\r\nCat.plugin(elmongo-flex, { host: 'localhost', port: 9200, prefix: 'development' })\r\n```\r\n\r\nThis way, you can use the same `mongoose` collections for test and for development, and you will have separate search indices for them (so you won't have situations like test data showing up in development search results).\r\n\r\n**Note**: there is no need to specify a `prefix` if you are using separate Elasticsearch hosts or ports. The `prefix` is simply for cases where you are sharing a single Elasticsearch instance for multiple codebases.\r\n\r\n##`elmongo-flex.search(searchOptions, callback)`\r\n\r\nYou can use this function to make searches that are not limited to a specific collection. Use this to search across one or several collections at the same time (without making multiple roundtrips to Elasticsearch). The default options are the same as for `Model.search()`, with one extra key: `collections`. It defaults to searching all collections, but you can specify an array of collections to search on.\r\n\r\n```js\r\nelmongo-flex.search({ collections: [ 'cats', 'dogs' ], query: '*' }, function (err, results) {\r\n\t// ...\r\n})\r\n```\r\n\r\nBy default, `elmongo-flex.search()` will use `localhost:9200` (the default Elasticsearch configuration). To configure it to use a different url, use `elmongo.search.config(options)`.\r\n\r\n##`elmongo-flex.search.config(options)`\r\n\r\nConfigure the Elasticsearch url that `elmongo-flex` uses to perform a search when `elmongo-flex.search()` is used. `options` can specify the same keys as `Model.plugin(elmongo-flex, options)`. `elmongo-flex.search.config()` has no effect on the configuration for individual collections - to configure the url for collections, use `Model.plugin()`.\r\n\r\nExample:\r\n```js\r\nelmongo-flex.search.config({ host: something.com, port: 9300 })\r\n```\r\n\r\n#Autocomplete\r\n\r\nTo add autocomplete functionality to your models, specify which fields you want autocomplete on in the schema:\r\n```js\r\nvar CatSchema = new Schema({\r\n    name: { type: String, autocomplete: true },\r\n    age: { type: Number },\r\n    owner: { type: ObjectId, ref: 'Person' },\r\n    nicknames: [ { type: String, autocomplete: true } ]\r\n})\r\n\r\n// add the elmongo-flex plugin to your collection\r\nCatSchema.plugin(elmongo-flex)\r\n\r\nvar Cat = mongoose.model('Cat', CatSchema)\r\n\r\nvar kitty = new Cat({ name: 'simba' }).save()\r\n```\r\n\r\nSetup the search index using `.sync()`:\r\n```js\r\nCat.sync(function (err, numSynced) {\r\n  // all cats are now searchable in elasticsearch\r\n  console.log('number of cats synced:', numSynced)\r\n})\r\n```\r\n\r\nNow you have autocomplete on `name` and `nicknames` whenever you search on those fields:\r\n```js\r\nCat.search({ query: 'si', fields: [ 'name' ] }, function (err, searchResults) {\r\n    // any cats having a name starting with 'si' will show up in the search results\r\n})\r\n```\r\n\r\n-------\r\n\r\n## Running the tests\r\n\r\n```\r\nnpm test\r\n```\r\n\r\n-------\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) by Sold. <tolga@usesold.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/styonsk/elmongo-flex/issues"
  },
  "_id": "elmongo-flex@1.0.8",
  "dist": {
    "shasum": "cd2d5cf275e09d0157d8313fbceaa032a2d4398a"
  },
  "_from": "elmongo-flex@",
  "_resolved": "https://registry.npmjs.org/elmongo-flex/-/elmongo-flex-1.0.8.tgz"
}
